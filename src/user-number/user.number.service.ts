import { CACHE_MANAGER } from '@nestjs/cache-manager';
import { Inject, Injectable } from '@nestjs/common';
import { Cache } from 'cache-manager';
import { InjectVkApi } from 'nestjs-vk';
import { getRandomId, VK } from 'vk-io';

import { dateUtils } from '../common/utils/date.utils';
import { VkService } from '../vk/vk.service';
import { UserNumberNotificationDto } from './dto/user.number.notification.dto';

@Injectable()
export class UserNumberService {
  constructor(
    @Inject(CACHE_MANAGER) private readonly cacheManager: Cache,
    private readonly vkHelpService: VkService,
    @InjectVkApi()
    private readonly vk: VK,
  ) {}

  /**
   * –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ –Ω–æ–º–µ—Ä–∞ —á–µ–ª–æ–≤–µ–∫–∞
   */
  async notificationFindNumber(parameters: UserNumberNotificationDto) {
    await this.vk.api.messages.send({
      user_id: parameters.userId,
      message: await this.getTextNotificationFind(parameters),
      random_id: getRandomId(),
      disable_mentions: true,
    });
  }

  private async getTextNotificationFind(parameters: UserNumberNotificationDto) {
    const user = await this.vkHelpService.getInfoUserVk(parameters.userId);
    if (!parameters.isBlock)
      return `üí¨üîî${
        user.first_name
      }, –∫—Ç–æ-—Ç–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–ª –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –í–∞—à–µ–º –Ω–æ–º–µ—Ä–µ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (${
        parameters.number.slice(7, 9) + `-` + parameters.number.slice(9, 12)
      }).\n
–í—Ä–µ–º—è ${dateUtils.getDateFormatNumber(parameters.date)}
`;
    else
      return `üí¨‚õî${
        user.first_name
      }, –∫—Ç–æ-—Ç–æ –ø—ã—Ç–∞–ª—Å—è –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –í–∞—à–µ–º –Ω–æ–º–µ—Ä–µ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (${
        parameters.number.slice(7, 9) + `-` + parameters.number.slice(9, 12)
      }).\n
–í—Ä–µ–º—è ${dateUtils.getDateFormatNumber(parameters.date)}
`;
  }
}
